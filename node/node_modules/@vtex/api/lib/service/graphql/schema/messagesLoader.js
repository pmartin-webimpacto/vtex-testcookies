"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dataloader_1 = __importDefault(require("dataloader"));
const ramda_1 = require("ramda");
const MAX_QUERYSTRING_LENGTH = 2048;
const batchData = (lengths, indexedData) => {
    let batchedData = [];
    let batch = [];
    let sumLength = 0;
    indexedData.forEach((obj, index) => {
        const length = lengths[index];
        if (sumLength + length > MAX_QUERYSTRING_LENGTH) {
            batchedData = ramda_1.append(batch, batchedData);
            batch = [obj];
            sumLength = length;
        }
        else {
            sumLength = sumLength + length;
            batch = ramda_1.append(obj, batch);
        }
    });
    return ramda_1.append(batch, batchedData);
};
const sortByContent = (indexedData) => ramda_1.sortBy(([_, data]) => ramda_1.prop('content', data), indexedData);
const sortByOriginalIndex = (indexedTraslations) => ramda_1.sortBy(([index, _]) => Number(index), indexedTraslations);
exports.messagesLoader = (messagesAPI) => new dataloader_1.default(async (data) => {
    const to = data[0].to; // Should be consistent across batches
    const indexedData = ramda_1.toPairs(data);
    const sortedIndexedData = sortByContent(indexedData);
    const originalIndexes = ramda_1.pluck(0, sortedIndexedData);
    const sortedData = ramda_1.pluck(1, sortedIndexedData);
    const strLength = ramda_1.map(obj => JSON.stringify(obj).length, sortedData);
    const batches = batchData(strLength, sortedData);
    const promises = ramda_1.map((batch) => !!to ? messagesAPI.translate(to, batch) : Promise.resolve(ramda_1.pluck('content', batch)), batches);
    const translations = await Promise.all(promises).then(res => ramda_1.flatten(res));
    const indexedTranslations = ramda_1.zip(originalIndexes, translations);
    const translationsInOriginalOrder = sortByOriginalIndex(indexedTranslations);
    return ramda_1.pluck(1, translationsInOriginalOrder);
});
