import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { CacheLayer } from '../../caches/CacheLayer';
import { MiddlewareContext, RequestConfig } from '../typings';
export declare const cacheKey: (config: AxiosRequestConfig) => string;
export declare function isCacheable(arg: RequestConfig, type: CacheType): arg is CacheableRequestConfig;
export declare enum CacheType {
    None = 0,
    Memory = 1,
    Disk = 2,
    Any = 3
}
interface CacheOptions {
    type: CacheType;
    storage: CacheLayer<string, Cached>;
    segmentToken: string;
}
export declare const cacheMiddleware: ({ type, storage, segmentToken }: CacheOptions) => (ctx: MiddlewareContext, next: () => Promise<void>) => Promise<void>;
export interface Cached {
    etag: string;
    expiration: number;
    response: Partial<AxiosResponse>;
    responseType?: string;
    responseEncoding?: string;
}
export declare type CacheableRequestConfig = RequestConfig & {
    url: string;
    cacheable: CacheType;
    memoizable: boolean;
};
export {};
