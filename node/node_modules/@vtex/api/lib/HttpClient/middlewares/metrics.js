"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const retry_1 = require("../../utils/retry");
const status_1 = require("../../utils/status");
exports.metricsMiddleware = (metrics) => {
    return async (ctx, next) => {
        const start = ctx.config.metric ? process.hrtime() : null;
        let status = 'unknown';
        try {
            await next();
            if (ctx.config.metric && ctx.response && ctx.response.status) {
                status = status_1.statusLabel(ctx.response.status);
            }
        }
        catch (err) {
            if (ctx.config.metric) {
                if (err.code === 'ECONNABORTED') {
                    status = 'aborted';
                }
                else if (err.response && err.response.data && err.response.data.code === retry_1.TIMEOUT_CODE) {
                    status = 'timeout';
                }
                else if (err.response && err.response.status) {
                    status = status_1.statusLabel(err.response.status);
                }
                else {
                    status = 'error';
                }
            }
            throw err;
        }
        finally {
            if (ctx.config.metric) {
                const end = process.hrtime(start);
                const label = `http-client-${status}-${ctx.config.metric}`;
                const extensions = {};
                if (ctx.cacheHit) {
                    Object.assign(extensions, ctx.cacheHit);
                }
                if (ctx.config['axios-retry']) {
                    const { retryCount } = ctx.config['axios-retry'];
                    if (retryCount && retryCount > 0) {
                        extensions[`retry-${retryCount}`] = 1;
                    }
                }
                metrics.batch(label, end, extensions);
            }
        }
    };
};
