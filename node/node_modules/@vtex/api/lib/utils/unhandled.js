"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
// We can't log to Splunk without a token, so we are hacking our way into using
// the logger available from the last request cycle. ¯\_(ツ)_/¯
let lastLogger;
let watched;
// Remove the any typings once we move to nodejs 10.x
const handleSignal = async (signal) => {
    console.warn('Received signal', signal);
    if (lastLogger) {
        await lastLogger.warn({
            signal,
        });
    }
    // Default node behaviour
    process.exit(128 + os_1.constants.signals[signal]);
};
exports.updateLastLogger = (logger) => {
    lastLogger = logger;
};
exports.addProcessListeners = () => {
    // Listeners already set up
    if (watched) {
        return;
    }
    watched = process.on('uncaughtException', async (err) => {
        console.error('uncaughtException', err);
        if (err && lastLogger) {
            err.type = 'uncaughtException';
            await lastLogger.error(err).catch(() => null);
        }
        process.exit(420);
    });
    process.on('unhandledRejection', (reason, promise) => {
        console.error('unhandledRejection', reason, promise);
        if (reason && lastLogger) {
            reason.type = 'unhandledRejection';
            lastLogger.error(reason).catch(() => null);
        }
    });
    process.on('warning', (warning) => {
        console.warn(warning);
    });
    process.on('SIGINT', handleSignal);
    process.on('SIGTERM', handleSignal);
};
